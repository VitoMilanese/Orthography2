@inject IJSRuntime jsRuntime

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">
        <div class="col-sm" style="margin-top: -5px">
            Orthography<br />
            <div style="font-size:12px; margin-left:10px; margin-top:-5px">by Vitalii Hanych © 2020</div>
        </div>
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3 mb-2">
            <label for="language" style="color:white">@UILanguage.Label("ui_language", selectedLanguage): </label>
            <select id="language" class="form-control col-12" @bind="@selectedLanguage">
                @foreach (var language in Languages)
                {
                    <option value="@language.ID">
                        @language.Label
                    </option>
                }
            </select>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-book" aria-hidden="true"></span> @UILanguage.Label("ui_0_conjugation", selectedLanguage)
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="prepositions">
                <span class="oi oi-bolt" aria-hidden="true"></span> @UILanguage.Label("ui_0_prepositions", selectedLanguage)
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private List<Language> Languages;
    private bool collapseNavMenu = true;
    private int m_selectedLanguage = UILanguage.DefaultLanguage;
    private int selectedLanguage
    {
        get => m_selectedLanguage;
        set
        {
            m_selectedLanguage = value;
            if (isInitialized)
            {
                Helper.WriteCookie(jsRuntime, "ui_language", m_selectedLanguage.ToString(), 365);
                LanguageChanged.InvokeAsync(m_selectedLanguage);
            }
        }
    }

    [Parameter] public EventCallback<int> LanguageChanged { get; set; }

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool isInitialized;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isInitialized = false;
        using (var db = new Db())
        {
            Languages = db.Languages.ToList();
            foreach (var language in Languages)
                language.Label = db.Labels.FirstOrDefault(p => p.ID == language.LanguageNameID)?.Value ?? UILanguage.UnknownLabel(selectedLanguage);
            Languages = Languages.OrderBy(p => p.Label).ToList();
        }
        LoadLanguage();
    }

    public void LoadLanguage()
    {
        Task.Run(async () =>
        {
            const string key = "ui_language";
            var cookie = Helper.ReadCookie(jsRuntime, key);
            var languageId = cookie?.FirstOrDefault(p => p.Key == key).Value;
            selectedLanguage = int.TryParse(languageId, out var id)
                            ? id
                            : UILanguage.DefaultLanguage;
            await InvokeAsync(StateHasChanged);
            isInitialized = true;
        }).ConfigureAwait(false);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
