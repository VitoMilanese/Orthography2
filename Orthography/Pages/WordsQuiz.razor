@*https://getbootstrap.com/docs/4.1/layout/grid/*@
@page "/"

@if (word == null)
{
    <NoWordsFound />
}
else
{
    <div class="row">
        <div class="form-group col-sm mr-2">
            @if (Modes.Count > 0)
            {
                <label for="mode">Mode: </label>
                <select id="mode" class="form-control col-12" disabled="@randomMode" @bind="@selectedMode">
                    @foreach (var mode in Modes)
                    {
                        <option value="@mode.ID" disabled="@mode.Disabled">
                            @mode.Value
                        </option>
                    }
                </select>
                @if (Modes.Count > 1)
                {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbRandomMode" @bind="@randomMode" />
                        <label for="cbRandomMode" class="custom-control-label">Random</label>
                    </div>
                }
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Numbers.Count > 0)
            {
                <label for="number">Number: </label>
                <select id="number" class="form-control" @bind="@selectedNumber">
                    @foreach (var number in Numbers)
                    {
                        <option value="@number.ID" disabled="@number.Disabled">
                            @number.Value
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Persons.Count > 0)
            {
                <label for="person">Person: </label>
                <select id="person" class="form-control" @bind="@selectedPerson">
                    @foreach (var person in Persons)
                    {
                        <option value="@person.ID" disabled="@person.Disabled">
                            @person.Value
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm">
            @if (Genders.Count > 0)
            {
                <label for="gender">Gender: </label>
                <select id="gender" class="form-control" @bind="@selectedGender">
                    @foreach (var gender in Genders)
                    {
                        <option value="@gender.ID" disabled="@gender.Disabled">
                            @gender.Value
                        </option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="container mt-0 mt-sm-5">
        <div class="row">
            <div class="col-sm" style="text-align:center">
                <h1><b>@word.Value</b></h1>
                @if (!string.IsNullOrWhiteSpace(@word.Translation))
                {
                    <a type="button" class="btn btn-outline-warning" @onclick="() => showTranslation = !showTranslation">
                        <b>
                            @if (showTranslation)
                            {
                                @word.Translation
                            }
                            else
                            {
                                @("Translation")
                            }
                        </b>
                    </a>
                }
            </div>
        </div>
    </div>
    <div class="container mt-2 mt-sm-4">
        <div class="row">
            <div class="col-3" style="text-align:right">
                @if (isGenerating)
                {
                    <img src="https://art.pixilart.com/8afb782c4601281.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-danger mt-4" style="min-height: 30pt" @onclick="GenerateWord">Reset</button>
                }
            </div>
            <div class="col-6" style="text-align:center">
                <div class="form-group mb-0">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbLockWord" @bind="lockWord" />
                        <label for="cbLockWord" class="custom-control-label">Lock the word</label>
                    </div>
                </div>
                <div class="form-group col-12 mr-2 mt-0">
                    <input type="text" class="col-12" id="answer" placeholder="Answer"
                           style="text-align:center;min-height:30pt"
                           @bind-value="@inputText" @bind-value:event="oninput"
                           @onkeypress="AnswerKeyPress" />
                </div>
                @if (showResult)
                {
                    <div class="form-group mt-2">
                        @if (resultValue)
                        {
                            <h3 style="color:green">Correct</h3>
                        }
                        else
                        {
                            <h3 style="color:red">Wrong</h3>
                        }
                    </div>
                }
            </div>
            <div class="col-3" style="text-align:left">
                @if (showResult || isGenerating)
                {
                    <img src="https://art.pixilart.com/8afb782c4601281.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-info mt-4" style="min-height: 30pt" @onclick="CheckAnswer">Check</button>
                }
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(answer))
        {
            <div class="row" style="text-align:center">
                <div class="col-sm">
                    <a type="button" class="btn btn-outline-warning" style="text-align:center" @onclick="ShowAnswer">
                        <b>
                            @if (showAnswer)
                            {
                                @answer
                            }
                            else
                            {
                                @("Answer")
                            }
                        </b>
                    </a>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Word> Words;
    private List<Mode> Modes;
    private List<Number> Numbers;
    private List<Person> Persons;
    private List<Gender> Genders;
    private Word word;
    private List<Rule> rules;
    private List<Relation> relations;
    private string inputText;
    private string answer;
    private bool isInitialized;
    private bool showTranslation;
    private bool showAnswer;
    private bool randomMode;
    private bool lockWord;
    private bool showResult;
    private bool resultValue;
    private bool isGenerating;
    private int m_selectedMode;
    private int selectedMode
    {
        get => m_selectedMode;
        set
        {
            m_selectedMode = value;

            var rr = rules.Where(p => p.ModeID == selectedMode);
            var rnd = new Random(DateTime.Now.Millisecond);

            var numbers = rr.Select(p => p.NumberID).Distinct().ToList();
            foreach (var number in Numbers)
                number.Disabled = !numbers.Any(p => p == number.ID);
            var enabledN = Numbers.Where(p => !p.Disabled).ToArray();
            if (isGenerating)
                selectedNumber = enabledN.Length > 0 ? enabledN[rnd.Next(enabledN.Length)].ID : 0;
            else
                selectedNumber = Numbers.FirstOrDefault(p => p.ID == selectedNumber && !p.Disabled)?.ID
            ?? Numbers.FirstOrDefault(p => !p.Disabled)?.ID
            ?? 0;

            var genders = rr.Select(p => p.GenderID).Distinct().ToList();
            foreach (var gender in Genders)
                gender.Disabled = !genders.Any(p => p == gender.ID);

            var enabledG = Genders.Where(p => !p.Disabled).ToArray();
            if (isGenerating)
                selectedGender = enabledG.Length > 0 ? enabledG[rnd.Next(enabledG.Length)].ID : 0;
            else
                selectedGender = Genders.FirstOrDefault(p => p.ID == selectedGender && !p.Disabled)?.ID
            ?? Genders.FirstOrDefault(p => !p.Disabled)?.ID
            ?? 0;
        }
    }
    private int m_selectedNumber;
    private int selectedNumber
    {
        get => m_selectedNumber;
        set
        {
            m_selectedNumber = value;

            var rr = rules.Where(p => p.ModeID == selectedMode && p.NumberID == selectedNumber);
            var rnd = new Random(DateTime.Now.Millisecond);

            var persons = rr.Select(p => p.PersonID).Distinct().ToList();
            foreach (var person in Persons)
                person.Disabled = !persons.Any(p => p == person.ID);
            var enabled = Persons.Where(p => !p.Disabled).ToArray();
            if (isGenerating)
                selectedPerson = enabled.Length > 0 ? enabled[rnd.Next(enabled.Length)].ID : 0;
            else
                selectedPerson = Persons.FirstOrDefault(p => p.ID == selectedPerson && !p.Disabled)?.ID
                    ?? Persons.FirstOrDefault(p => !p.Disabled)?.ID
                    ?? 0;
        }
    }
    private int m_selectedPerson;
    private int selectedPerson
    {
        get => m_selectedPerson;
        set
        {
            m_selectedPerson = value;
            if (isInitialized && !isGenerating) GetAnswer();
        }
    }
    private int m_selectedGender;
    private int selectedGender
    {
        get => m_selectedGender;
        set
        {
            m_selectedGender = value;
            if (isInitialized && !isGenerating) GetAnswer();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Modes = Db.Context.Modes.ToList();
        Numbers = Db.Context.Numbers.ToList();
        Persons = Db.Context.Persons.ToList();
        Genders = Db.Context.Genders.ToList();

        var wordIds = Db.Context.Relations.Select(p => p.WordID).Distinct().ToList();
        Words = Db.Context.Words.Where(p => wordIds.Contains(p.ID)).ToList();

        GetWord();
        isInitialized = true;
    }

    private async Task AnswerKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await CheckAnswer();
    }

    private async Task CheckAnswer()
    {
        if (showResult) return;
        resultValue = (inputText?.Trim().ToLower().Replace("’", "'") ?? string.Empty) == (answer?.Trim().ToLower() ?? string.Empty);
        showResult = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showResult = false;
            if (resultValue)
                await GenerateWord();
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private async Task GenerateWord()
    {
        if (isGenerating) return;
        isGenerating = true;
        await Task.Run(async () =>
        {
            await Task.Delay(100);
            GetWord();
            isGenerating = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private void GetWord()
    {
        if (Words.Count <= 0)
        {
            // no words
            return;
        }
        var rnd = new Random(DateTime.Now.Millisecond);
        if (!lockWord)
        {
            if (Words.Count == 1)
            {
                word = Words[0];
            }
            else
            {
                var id = rnd.Next(Words.Count - (word == null ? 0 : 1));
                word = Words.Where(p => word == null || p.ID != word.ID).ToList()[id];
            }
        }

        inputText = string.Empty;

        relations = Db.Context.Relations.Where(p => p.WordID == word.ID).ToList();
        var ruleIds = relations.Select(p => p.RuleID);
        rules = Db.Context.Rules.Where(p => ruleIds.Contains(p.ID)).ToList();

        var modes = rules.Select(p => p.ModeID).Distinct().ToList();
        foreach (var mode in Modes)
            mode.Disabled = !modes.Any(p => p == mode.ID);
        var enabled = Modes.Where(p => !p.Disabled).ToArray();
        if (!randomMode)
        {
            if (isInitialized)
                selectedMode = enabled.Any(p => p.ID == selectedMode) ? selectedMode : Modes[0].ID;
            else
                selectedMode = Modes.FirstOrDefault(p => p.ID == selectedMode && !p.Disabled)?.ID
                    ?? Modes.FirstOrDefault(p => !p.Disabled)?.ID
                    ?? 0;
        }
        else
            selectedMode = enabled.Length > 0 ? enabled[rnd.Next(enabled.Length)].ID : 0;

        GetAnswer();
    }

    private void GetAnswer()
    {
        var selectedRule = rules.Where(p =>
            p.ModeID == selectedMode &&
            p.NumberID == selectedNumber &&
            p.PersonID == selectedPerson &&
            p.GenderID == selectedGender)
            .Select(p => p.ID)
            .FirstOrDefault();
        answer = relations.FirstOrDefault(p => p.RuleID == selectedRule)?.Result.Replace("’", "'") ?? null;
    }

    private async Task ShowAnswer()
    {
        if (showAnswer) return;
        showAnswer = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showAnswer = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }
}
