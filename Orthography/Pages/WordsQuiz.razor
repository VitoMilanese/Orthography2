@*https://getbootstrap.com/docs/4.1/layout/grid/*@
@page "/"

@if (selectedWord == null)
{
    <NoWordsFound />
}
else
{
    <div class="row">
        <div class="form-group col-sm mr-2">
            @if (Modes.Count > 0)
            {
                <label for="mode">@UILabels.Labels["ui_0_mode"]: </label>
                <select id="mode" class="form-control col-12" disabled="@randomMode" @bind="@selectedMode">
                    @foreach (var mode in Modes)
                    {
                        <option value="@mode.ID" disabled="@mode.Disabled">
                            @UILabels.ModeLabels[@mode.ID]
                        </option>
                    }
                </select>
                @if (Modes.Count > 1)
                {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbRandomMode" @bind="@randomMode" />
                        <label for="cbRandomMode" class="custom-control-label">@UILabels.Labels["ui_0_random"]</label>
                    </div>
                }
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Numbers.Count > 0)
            {
                <label for="number">@UILabels.Labels["ui_0_number"]: </label>
                <select id="number" class="form-control" @bind="@selectedNumber">
                    @foreach (var number in Numbers)
                    {
                        <option value="@number.ID" disabled="@number.Disabled">
                            @UILabels.NumberLabels[number.ID]
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Persons.Count > 0)
            {
                <label for="person">@UILabels.Labels["ui_0_person"]: </label>
                <select id="person" class="form-control" @bind="@selectedPerson">
                    @foreach (var person in Persons)
                    {
                        <option value="@person.ID" disabled="@person.Disabled">
                            @UILabels.PersonLabels[person.ID]
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm">
            @if (Genders.Count > 0)
            {
                <label for="gender">@UILabels.Labels["ui_0_gender"]: </label>
                <select id="gender" class="form-control" @bind="@selectedGender">
                    @foreach (var gender in Genders)
                    {
                        <option value="@gender.ID" disabled="@gender.Disabled">
                            @UILabels.GenderLabels[gender.ID]
                        </option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="container mt-0 mt-sm-5">
        @if (!string.IsNullOrWhiteSpace(@quickInfo))
        {
            <div class="row">
                <div class="col-sm" style="text-align:center">
                    <i>@quickInfo</i>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm" style="text-align:center">
                <h1><b>@selectedWord.Value</b></h1>
                @if (!string.IsNullOrWhiteSpace(selectedWord.Translation))
                {
                    <a type="button" class="btn btn-outline-warning" @onclick="() => showTranslation = !showTranslation">
                        <b>
                            @if (showTranslation)
                            {
                                @selectedWord.Translation
                            }
                            else
                            {
                                @UILabels.Labels["ui_0_translation"]
                            }
                        </b>
                    </a>
                }
            </div>
        </div>
    </div>
    <div class="container mt-2 mt-sm-4">
        <div class="row">
            <div class="col-3" style="text-align:right">
                @if (isGenerating)
                {
                    <img src="https://art.pixilart.com/8afb782c4601281.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-danger mt-4" style="min-height: 30pt" @onclick="GenerateWord">@UILabels.Labels["ui_0_reset"]</button>
                }
            </div>
            <div class="col-6" style="text-align:center">
                <div class="form-group mb-0">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbLockWord" @bind="lockWord" />
                        <label for="cbLockWord" class="custom-control-label">@UILabels.Labels["ui_0_lock_word"]</label>
                    </div>
                </div>
                <div class="form-group col-12 mr-2 mt-0">
                    <input type="text" class="col-12" id="answer" placeholder="@UILabels.Labels["ui_0_answer"]"
                           style="text-align:center;min-height:30pt"
                           @bind-value="@inputText" @bind-value:event="oninput"
                           @onkeypress="AnswerKeyPress" />
                </div>
                @if (showResult)
                {
                    <div class="form-group mt-2">
                        @if (resultValue)
                        {
                            <h3 style="color:green">@UILabels.Labels["ui_0_correct"]</h3>
                        }
                        else
                        {
                            <h3 style="color:red">@UILabels.Labels["ui_0_wrong"]</h3>
                        }
                    </div>
                }
            </div>
            <div class="col-3" style="text-align:left">
                @if (showResult || isGenerating)
                {
                    <img src="https://art.pixilart.com/8afb782c4601281.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-info mt-4" style="min-height: 30pt" @onclick="CheckAnswer">@UILabels.Labels["ui_0_check"]</button>
                }
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(answer))
        {
            <div class="row" style="text-align:center">
                <div class="col-sm">
                    <a type="button" class="btn btn-outline-warning" style="text-align:center" @onclick="ShowAnswer">
                        <b>
                            @if (showAnswer)
                            {
                                @answer
                            }
                            else
                            {
                                @UILabels.Labels["ui_0_answer"]
                            }
                        </b>
                    </a>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Word> Words;
    private List<Mode> Modes;
    private List<Number> Numbers;
    private List<Person> Persons;
    private List<Gender> Genders;
    private List<Rule> Rules;
    private List<Relation> Relations;
    private Word selectedWord;
    private Rule selectedRule;
    private Relation selectedRelation;
    private string quickInfo;
    private string inputText;
    private string answer;
    private bool isInitialized;
    private bool showTranslation;
    private bool showAnswer;
    private bool randomMode;
    private bool lockWord;
    private bool showResult;
    private bool resultValue;
    private bool isGenerating;
    private int m_selectedMode;
    private int selectedMode
    {
        get => m_selectedMode;
        set
        {
            m_selectedMode = value;

            var rr = Rules.Where(p => p.ModeID == selectedMode);

            var numbers = rr.Select(p => p.NumberID).Distinct().ToList();
            foreach (var number in Numbers)
                number.Disabled = !numbers.Any(p => p == number.ID);

            var persons = rr.Where(p => p.NumberID == selectedNumber).Select(p => p.PersonID).Distinct().ToList();
            foreach (var person in Persons)
                person.Disabled = !persons.Any(p => p == person.ID);

            var genders = rr.Select(p => p.GenderID).Distinct().ToList();
            foreach (var gender in Genders)
                gender.Disabled = !genders.Any(p => p == gender.ID);

            UpdateSelectionChain();
        }
    }
    private int m_selectedNumber;
    private int selectedNumber
    {
        get => m_selectedNumber;
        set
        {
            m_selectedNumber = value;

            var rr = Rules.Where(p => p.ModeID == selectedMode && p.NumberID == selectedNumber);

            var persons = rr.Select(p => p.PersonID).Distinct().ToList();
            foreach (var person in Persons)
                person.Disabled = !persons.Any(p => p == person.ID);

            UpdateSelectionChain();
        }
    }
    private int m_selectedPerson;
    private int selectedPerson
    {
        get => m_selectedPerson;
        set
        {
            m_selectedPerson = value;
            UpdateSelectionChain();
        }
    }
    private int m_selectedGender;
    private int selectedGender
    {
        get => m_selectedGender;
        set
        {
            m_selectedGender = value;
            UpdateSelectionChain();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Numbers = Db.Context.Numbers.ToList();
        Persons = Db.Context.Persons.ToList();
        Genders = Db.Context.Genders.ToList();
        Rules = Db.Context.Rules.ToList();
        Relations = Db.Context.Relations.ToList();

        Modes = Db.Context.Modes.ToList();
        var availableRules = Relations.Select(p => p.RuleID).Distinct();
        var availableModes = Rules.Where(p => availableRules.Any(q => q == p.ID)).Select(p => p.ModeID).Distinct().ToList();
        foreach (var mode in Modes)
            mode.Disabled = !availableModes.Any(p => p == mode.ID);

        var wordIds = Relations.Select(p => p.WordID).Distinct().ToList();
        Words = Db.Context.Words.Where(p => wordIds.Contains(p.ID)).ToList();

        UILabels.OnLanguageChanged = UpdateUI;

        GetWord();
        isInitialized = true;
    }

    private async Task AnswerKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await CheckAnswer();
    }

    private async Task CheckAnswer()
    {
        if (showResult) return;
        resultValue = (inputText?.Trim().ToLower().Replace("’", "'") ?? string.Empty) == (answer?.Trim().ToLower() ?? string.Empty);
        showResult = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showResult = false;
            if (resultValue)
                await GenerateWord();
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private async Task GenerateWord()
    {
        if (isGenerating) return;
        isGenerating = true;
        await Task.Run(async () =>
        {
            await Task.Delay(100);
            GetWord();
            isGenerating = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private void GetWord()
    {
        var rnd = new Random(DateTime.Now.Millisecond);
        Relations = Db.Context.Relations
            .Where(p => selectedWord == null ||
                (p.ID != selectedRelation.ID &&
                    (!lockWord ||
                        (p.WordID == selectedWord.ID)
                    )
                )
            ).ToList();

        if (Relations.Count == 0)
        {
            selectedWord = null;
            return;
        }

        if (Relations.Count == 1)
            selectedRelation = Relations[0];
        else
        {
            var availableRelations = GetRelations(randomMode ? -1 : selectedMode)
                .Where(p =>
                    (selectedRelation == null || p.ID != selectedRelation.ID) &&
                    (selectedRule == null || p.RuleID != selectedRule.ID)
                ).ToList();
            var id = rnd.Next(availableRelations.Count);
            selectedRelation = availableRelations[id];
        }

        selectedWord = Words.FirstOrDefault(p => p.ID == selectedRelation.WordID);
        answer = selectedRelation.Result.Replace("’", "'") ?? null;
        inputText = string.Empty;

        selectedRule = Rules.FirstOrDefault(p => p.ID == selectedRelation.RuleID);
        selectedMode = selectedRule.ModeID;
        selectedNumber = selectedRule.NumberID;
        selectedPerson = selectedRule.PersonID;
        selectedGender = selectedRule.GenderID;

        UpdateRelation();
    }

    private IEnumerable<Relation> GetRelations(int mode = -1)
    {
        var availableRules = mode < 0 ? Rules : Rules.Where(p => p.ModeID == mode).ToList();
        if (availableRules.Count == 0)
            availableRules = Rules;
        var relations = Relations.Where(p => availableRules.Any(q => q.ID == p.RuleID));
        return relations;
    }

    private void UpdateRelation()
    {
        selectedRule = Rules.FirstOrDefault(p =>
            p.ModeID == selectedMode &&
            p.NumberID == selectedNumber &&
            p.PersonID == selectedPerson &&
            p.GenderID == selectedGender);
        selectedRelation = selectedRule == null ? null : Relations.FirstOrDefault(p =>
            p.RuleID == selectedRule.ID &&
            p.WordID == selectedWord.ID);
        answer = selectedRelation?.Result.Replace("’", "'") ?? null;

        const string DEFAULT_ANY = "any";
        var any = new[]
        {
            (UILabels.Labels["ui_0_number_any"]?.ToLower() ?? DEFAULT_ANY),
            (UILabels.Labels["ui_0_person_any"]?.ToLower() ?? DEFAULT_ANY),
            (UILabels.Labels["ui_0_gender_any"]?.ToLower() ?? DEFAULT_ANY)
        };
        quickInfo = string.Join(" - ", new List<string>
        {
            UILabels.ModeLabels[Modes.FirstOrDefault(p => p.ID == selectedMode).ID] ?? UILabels.UnknownLabel,
            UILabels.NumberLabels[Numbers.FirstOrDefault(p => p.ID == selectedNumber).ID] ?? UILabels.UnknownLabel,
            UILabels.PersonLabels[Persons.FirstOrDefault(p => p.ID == selectedPerson).ID] ?? UILabels.UnknownLabel,
            UILabels.GenderLabels[Genders.FirstOrDefault(p => p.ID == selectedGender).ID] ?? UILabels.UnknownLabel
        }.Where(p => !any.Contains(p.ToLower())));
    }

    private bool updatingSelectionChain;
    private void UpdateSelectionChain()
    {
        if (updatingSelectionChain) return;
        updatingSelectionChain = true;
        if (Modes.FirstOrDefault(p => p.ID == selectedMode)?.Disabled ?? false)
            selectedMode = Modes.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Numbers.FirstOrDefault(p => p.ID == selectedNumber)?.Disabled ?? false)
            selectedNumber = Numbers.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Persons.FirstOrDefault(p => p.ID == selectedPerson)?.Disabled ?? false)
            selectedPerson = Persons.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Genders.FirstOrDefault(p => p.ID == selectedGender)?.Disabled ?? false)
            selectedGender = Genders.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (isInitialized && !isGenerating) UpdateRelation();
        updatingSelectionChain = false;
    }

    private async Task ShowAnswer()
    {
        if (showAnswer) return;
        showAnswer = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showAnswer = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private void UpdateUI(object sender, EventArgs e)
    {
        InvokeAsync(() => this.StateHasChanged());
    }
}
