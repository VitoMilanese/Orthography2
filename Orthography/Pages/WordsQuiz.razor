@*https://getbootstrap.com/docs/4.1/layout/grid/*@
@page "/"
@inject IJSRuntime jsRuntime

@if (selectedWord == null)
{
    <NoWordsFound />
}
else
{
    <div class="row">
        <div class="form-group col-sm mr-2">
            @if (Modes.Count > 0)
            {
                <label for="mode">@UILanguage.Label("ui_0_mode", LanguageId): </label>
                <select id="mode" class="form-control col-12" disabled="@randomMode" @bind="@selectedMode">
                    @foreach (var mode in Modes)
                    {
                        <option value="@mode.ID" disabled="@mode.Disabled">
                            @UILanguage.Mode(mode.ID, LanguageId)
                        </option>
                    }
                </select>
                @if (Modes.Count > 1)
                {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbRandomMode" @bind="@randomMode" />
                        <label for="cbRandomMode" class="custom-control-label">@UILanguage.Label("ui_0_random", LanguageId)</label>
                    </div>
                }
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Numbers.Count > 0)
            {
                <label for="number">@UILanguage.Label("ui_0_number", LanguageId): </label>
                <select id="number" class="form-control" @bind="@selectedNumber">
                    @foreach (var number in Numbers)
                    {
                        <option value="@number.ID" disabled="@number.Disabled">
                            @UILanguage.Number(number.ID, LanguageId)
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm mr-2">
            @if (Persons.Count > 0)
            {
                <label for="person">@UILanguage.Label("ui_0_person", LanguageId): </label>
                <select id="person" class="form-control" @bind="@selectedPerson">
                    @foreach (var person in Persons)
                    {
                        <option value="@person.ID" disabled="@person.Disabled">
                            @UILanguage.Person(person.ID, LanguageId)
                        </option>
                    }
                </select>
            }
        </div>
        <div class="form-group col-sm">
            @if (Genders.Count > 0)
            {
                <label for="gender">@UILanguage.Label("ui_0_gender", LanguageId): </label>
                <select id="gender" class="form-control" @bind="@selectedGender">
                    @foreach (var gender in Genders)
                    {
                        <option value="@gender.ID" disabled="@gender.Disabled">
                            @UILanguage.Gender(gender.ID, LanguageId)
                        </option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="container mt-0 mt-sm-5">
        @if (!string.IsNullOrWhiteSpace(@quickInfo))
        {
            <div class="row">
                <div class="col-sm" style="text-align:center">
                    <i>@quickInfo</i>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm" style="text-align:center">
                <h1><b>@selectedWord.Value</b></h1>
                @if (!string.IsNullOrWhiteSpace(selectedWord.Translation))
                {
                    <table width="100%">
                        <tr>
                            <td style="width:15%" />
                            <td align="center">
                                <a type="button" class="LinkButton" @onclick="TranslateClicked"
                                   style="-webkit-appearance:none; -moz-appearance:none; appearance:none">
                                    <div class="LinkButton" style="border: 1px solid orange; border-radius: 5px;
                                        -webkit-touch-callout: none;
                                        -webkit-user-select: none;
                                        -khtml-user-select: none;
                                        -moz-user-select: none;
                                        -ms-user-select: none;
                                        user-select: none">
                                        <b>
                                            @if (showTranslation)
                                            {
                                                @selectedWord.Translation
                                            }
                                            else
                                            {
                                                @UILanguage.Label("ui_0_translation", LanguageId)
                                            }
                                        </b>
                                    </div>
                                </a>
                            </td>
                            <td style="width:15%" />
                        </tr>
                    </table>
                }
            </div>
        </div>
    </div>
    <div class="container mt-2 mt-sm-4">
        <div class="row">
            <div class="col-3" style="text-align:right">
                @if (isGenerating)
                {
                    <img src="/images/loading.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-danger mt-4" style="min-height: 30pt; min-width: 80px; font-size:12px" @onclick="Reset">@UILanguage.Label("ui_0_reset", LanguageId)</button>
                }
            </div>
            <div class="col-6" style="text-align:center">
                <div class="form-group mb-1">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="cbLockWord" @bind="lockWord" />
                        <label for="cbLockWord" class="custom-control-label" style="font-size: 14px">
                            @UILanguage.Label("ui_0_lock_word", LanguageId)
                        </label>
                    </div>
                </div>
                <div class="form-group col-12 mt-0" hidden="@showResult">
                    <input type="text" class="col-12" id="answer" placeholder="@UILanguage.Label("ui_0_answer", LanguageId)"
                           style="text-align:center;min-height:30pt"
                           @bind-value="@inputText" @bind-value:event="oninput"
                           @onkeypress="AnswerKeyPress" @ref="inputAnswer" />
                </div>
                @if (showResult)
                {
                    <div class="form-group mt-2">
                        @if (resultValue)
                        {
                            <h3 style="color:green; margin-bottom:14pt"><b>@UILanguage.Label("ui_0_correct", LanguageId)</b></h3>
                        }
                        else
                        {
                            <h3 style="color:red; margin-bottom:14pt"><b>@UILanguage.Label("ui_0_wrong", LanguageId)</b></h3>
                        }
                    </div>
                }
            </div>
            <div class="col-3" style="text-align:left">
                @if (showResult || isGenerating)
                {
                    <img src="/images/loading.gif" width="75" height="75" />
                }
                else
                {
                    <button type="button" class="btn btn-info mt-4" style="min-height: 30pt; min-width: 80px; font-size:12px" @onclick="CheckAnswer">@UILanguage.Label("ui_0_check", LanguageId)</button>
                }
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(answer))
        {
            <div class="row" style="text-align:center">
                <div class="col-3 col-sm-4" style="text-align:right; color:red">
                    @if (@countWrong > 0 || @countCorrect > 0)
                    {
                        @countWrong
                        <img src="/images/bad.png" width="25" height="25" style="vertical-align:top" />
                    }
                </div>
                <div class="col-6 col-sm-4 mb-5">
                    <a type="button" class="btn btn-outline-warning" style="text-align:center" @onclick="ShowAnswer">
                        <b>
                            @if (showAnswer)
                            {
                                @answer
                            }
                            else
                            {
                                @UILanguage.Label("ui_0_answer", LanguageId)
                            }
                        </b>
                    </a>
                </div>
                <div class="col-3 col-sm-4" style="text-align:left; color:green">
                    @if (@countWrong > 0 || @countCorrect > 0)
                    {
                        <img src="/images/good.png" width="25" height="25" style="vertical-align:top" />
                        @countCorrect
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private int m_languageId; //UpdateQuickInfo()
    //[CascadingParameter] int LanguageId { get; set; }
    [CascadingParameter] int LanguageId
    {
        get => m_languageId;
        set
        {
            m_languageId = value;
            UpdateQuickInfo();
        }
    }

    private List<Word> Words;
    private List<Mode> Modes;
    private List<Number> Numbers;
    private List<Person> Persons;
    private List<Gender> Genders;
    private List<Rule> Rules;
    private List<Relation> Relations;
    private Word selectedWord;
    private Rule selectedRule;
    private Relation selectedRelation;
    private ElementReference inputAnswer;
    private string quickInfo;
    private string inputText;
    private string answer;
    private bool isInitialized;
    private bool showTranslation;
    private bool showAnswer;
    private bool randomMode;
    private bool lockWord;
    private bool showResult;
    private bool resultValue;
    private bool isGenerating;
    private int countWrong;
    private int countCorrect;
    private int m_selectedMode;
    private int selectedMode
    {
        get => m_selectedMode;
        set
        {
            m_selectedMode = value;

            var rr = Rules.Where(p => p.ModeID == selectedMode);

            var numbers = rr.Select(p => p.NumberID).Distinct().ToList();
            foreach (var number in Numbers)
                number.Disabled = !numbers.Any(p => p == number.ID);

            var persons = rr.Where(p => p.NumberID == selectedNumber).Select(p => p.PersonID).Distinct().ToList();
            foreach (var person in Persons)
                person.Disabled = !persons.Any(p => p == person.ID);

            var genders = rr.Select(p => p.GenderID).Distinct().ToList();
            foreach (var gender in Genders)
                gender.Disabled = !genders.Any(p => p == gender.ID);

            UpdateSelectionChain();
        }
    }
    private int m_selectedNumber;
    private int selectedNumber
    {
        get => m_selectedNumber;
        set
        {
            m_selectedNumber = value;

            var rr = Rules.Where(p => p.ModeID == selectedMode && p.NumberID == selectedNumber);

            var persons = rr.Select(p => p.PersonID).Distinct().ToList();
            foreach (var person in Persons)
                person.Disabled = !persons.Any(p => p == person.ID);

            UpdateSelectionChain();
        }
    }
    private int m_selectedPerson;
    private int selectedPerson
    {
        get => m_selectedPerson;
        set
        {
            m_selectedPerson = value;
            UpdateSelectionChain();
        }
    }
    private int m_selectedGender;
    private int selectedGender
    {
        get => m_selectedGender;
        set
        {
            m_selectedGender = value;
            UpdateSelectionChain();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadLanguage();

        using (var db = new Db())
        {
            Numbers = db.Numbers.ToList();
            Persons = db.Persons.ToList();
            Genders = db.Genders.ToList();
            Rules = db.Rules.ToList();
            Relations = db.Relations.ToList();

            Modes = db.Modes.ToList();
            var availableRules = Relations.Select(p => p.RuleID).Distinct();
            var availableModes = Rules.Where(p => availableRules.Any(q => q == p.ID)).Select(p => p.ModeID).Distinct().ToList();
            foreach (var mode in Modes)
                mode.Disabled = !availableModes.Any(p => p == mode.ID);

            var wordIds = Relations.Select(p => p.WordID).Distinct().ToList();
            Words = db.Words.Where(p => wordIds.Contains(p.ID)).ToList();
        }

        GetWord();
        isInitialized = true;
    }

    private async Task AnswerKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await CheckAnswer();
    }

    private async Task CheckAnswer()
    {
        if (showResult) return;
        resultValue = (inputText?.Trim().ToLower().Replace("’", "'") ?? string.Empty) == (answer?.Trim().ToLower() ?? string.Empty);
        if (resultValue)
            ++countCorrect;
        else
            ++countWrong;
        showResult = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showResult = false;
            if (resultValue)
                await GenerateWord();
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
        await jsRuntime.InvokeVoidAsync("SetFocusToElement", inputAnswer);
    }

    private async Task Reset()
    {
        countWrong = 0;
        countCorrect = 0;
        await GenerateWord();
    }

    private async Task GenerateWord()
    {
        if (isGenerating) return;
        isGenerating = true;
        await Task.Run(async () =>
        {
            await Task.Delay(100);
            GetWord();
            isGenerating = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
        await jsRuntime.InvokeVoidAsync("SetFocusToElement", inputAnswer);
    }

    private void GetWord()
    {
        using (var db = new Db())
            Relations = db.Relations
                .Where(p => selectedWord == null ||
                    (p.ID != selectedRelation.ID &&
                        (!lockWord ||
                            (p.WordID == selectedWord.ID)
                        )
                    )
                ).ToList();

        if (Relations.Count == 0)
        {
            selectedWord = null;
            return;
        }

        var rnd = new Random(DateTime.Now.Millisecond);

        if (Relations.Count == 1)
            selectedRelation = Relations[0];
        else
        {
            var availableRelations = GetRelations(randomMode ? -1 : selectedMode)
                .Where(p =>
                    (selectedRelation == null || p.ID != selectedRelation.ID) &&
                    (selectedRule == null || p.RuleID != selectedRule.ID)
                ).ToList();
            var id = rnd.Next(availableRelations.Count);
            selectedRelation = availableRelations[id];
        }

        selectedWord = Words.FirstOrDefault(p => p.ID == selectedRelation.WordID);
        answer = selectedRelation.Result.Replace("’", "'") ?? null;
        inputText = string.Empty;

        selectedRule = Rules.FirstOrDefault(p => p.ID == selectedRelation.RuleID);
        selectedMode = selectedRule.ModeID;
        selectedNumber = selectedRule.NumberID;
        selectedPerson = selectedRule.PersonID;
        selectedGender = selectedRule.GenderID;

        UpdateRelation();
    }

    private IEnumerable<Relation> GetRelations(int mode = -1)
    {
        var availableRules = mode < 0 ? Rules : Rules.Where(p => p.ModeID == mode).ToList();
        if (availableRules.Count == 0)
            availableRules = Rules;
        var relations = Relations.Where(p => availableRules.Any(q => q.ID == p.RuleID));
        return relations;
    }

    private void UpdateRelation()
    {
        selectedRule = Rules.FirstOrDefault(p =>
            p.ModeID == selectedMode &&
            p.NumberID == selectedNumber &&
            p.PersonID == selectedPerson &&
            p.GenderID == selectedGender);
        selectedRelation = selectedRule == null ? null : Relations.FirstOrDefault(p =>
            p.RuleID == selectedRule.ID &&
            p.WordID == selectedWord.ID);
        answer = selectedRelation?.Result.Replace("’", "'") ?? null;
        UpdateQuickInfo();
    }

    private void UpdateQuickInfo()
    {
        if (!isInitialized) return;
        const string DEFAULT_ANY = "any";
        var any = new[]
        {
            (UILanguage.Label("ui_0_number_any", LanguageId)?.ToLower() ?? DEFAULT_ANY),
            (UILanguage.Label("ui_0_person_any", LanguageId)?.ToLower() ?? DEFAULT_ANY),
            (UILanguage.Label("ui_0_gender_any", LanguageId)?.ToLower() ?? DEFAULT_ANY)
        };
        quickInfo = string.Join(" - ", new List<string>
        {
            UILanguage.Mode(Modes.FirstOrDefault(p => p.ID == selectedMode).ID, LanguageId) ?? UILanguage.UnknownLabel(LanguageId),
            UILanguage.Number(Numbers.FirstOrDefault(p => p.ID == selectedNumber).ID, LanguageId) ?? UILanguage.UnknownLabel(LanguageId),
            UILanguage.Person(Persons.FirstOrDefault(p => p.ID == selectedPerson).ID, LanguageId) ?? UILanguage.UnknownLabel(LanguageId),
            UILanguage.Gender(Genders.FirstOrDefault(p => p.ID == selectedGender).ID, LanguageId) ?? UILanguage.UnknownLabel(LanguageId)
        }.Where(p => !any.Contains(p.ToLower())));
    }

    private bool updatingSelectionChain;
    private void UpdateSelectionChain()
    {
        if (updatingSelectionChain) return;
        updatingSelectionChain = true;
        if (Modes.FirstOrDefault(p => p.ID == selectedMode)?.Disabled ?? false)
            selectedMode = Modes.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Numbers.FirstOrDefault(p => p.ID == selectedNumber)?.Disabled ?? false)
            selectedNumber = Numbers.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Persons.FirstOrDefault(p => p.ID == selectedPerson)?.Disabled ?? false)
            selectedPerson = Persons.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (Genders.FirstOrDefault(p => p.ID == selectedGender)?.Disabled ?? false)
            selectedGender = Genders.FirstOrDefault(p => !p.Disabled)?.ID ?? 0;
        if (isInitialized && !isGenerating) UpdateRelation();
        updatingSelectionChain = false;
    }

    private async Task ShowAnswer()
    {
        if (showAnswer) return;
        showAnswer = true;
        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            showAnswer = false;
            //this.StateHasChanged(); // necessary in Blazor WebAssembly
        });
    }

    private void UpdateUI(object sender, EventArgs e)
    {
        InvokeAsync(() => this.StateHasChanged());
    }

    private async Task TranslateClicked()
    {
        showTranslation = !showTranslation;
        await jsRuntime.InvokeVoidAsync("SetFocusToElement", inputAnswer);
    }

    public void LoadLanguage()
    {
        Task.Run(async () =>
        {
            const string key = "ui_language";
            var cookie = Helper.ReadCookie(jsRuntime, key);
            var languageId = cookie?.FirstOrDefault(p => p.Key == key).Value;
            LanguageId = int.TryParse(languageId, out var id)
                            ? id
                            : UILanguage.DefaultLanguage;
            await InvokeAsync(StateHasChanged);
        });
    }
}
