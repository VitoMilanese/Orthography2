@page "/prepositions/edit"

<table align="center">
    <tr>
        <td colspan="5">
            <div class="mb-0" style="text-align:center">
                <h1><b>@selectedWord</b></h1>
            </div>
        </td>
        <td width="15px" rowspan="3" />
        <td width="40%" rowspan="3">
            <select id="words" class="form-control" @bind="@selectedWordId" size="20">
                @foreach (var word in Words)
                {
                    <option value="@word.ID">
                        @word.Value
                    </option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb0" @bind="@cbStates[0]">
                <label for="cb0" class="custom-control-label">qqch</label>
            </div>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb1" @bind="@cbStates[1]">
                <label for="cb1" class="custom-control-label">de qqch</label>
            </div>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb2" @bind="@cbStates[2]">
                <label for="cb2" class="custom-control-label">à qqch</label>
            </div>
        </td>
        <td width="15px" />
        <td>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb3" @bind="@cbStates[3]">
                <label for="cb3" class="custom-control-label">qqn</label>
            </div>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb4" @bind="@cbStates[4]">
                <label for="cb4" class="custom-control-label">de qqn</label>
            </div>
            <div class="custom-control custom-checkbox m-2">
                <input type="checkbox" class="custom-control-input" id="cb5" @bind="@cbStates[5]">
                <label for="cb5" class="custom-control-label">à qqn</label>
            </div>
        </td>
        <td width="15px" />
        <td>
            <div class="col-sm">
                <div class="custom-control custom-checkbox m-2">
                    <input type="checkbox" class="custom-control-input" id="cb6" @bind="@cbStates[6]">
                    <label for="cb6" class="custom-control-label">faire</label>
                </div>
                <div class="custom-control custom-checkbox m-2">
                    <input type="checkbox" class="custom-control-input" id="cb7" @bind="@cbStates[7]">
                    <label for="cb7" class="custom-control-label">de faire</label>
                </div>
                <div class="custom-control custom-checkbox m-2">
                    <input type="checkbox" class="custom-control-input" id="cb8" @bind="@cbStates[8]">
                    <label for="cb8" class="custom-control-label">à faire</label>
                </div>
            </div>
        </td>
    </tr>
    <tr style="vertical-align:top">
        <td colspan="5" style="vertical-align:top">
            <table style="text-align:center" align="center">
                <tr>
                    <td>
                        <button type="button" class="btn btn-primary mt-4" style="min-height: 30pt; min-width: 40px" @onclick="Previous">&lt;</button>
                    </td>
                    <td width="10px" />
                    <td>
                        <button type="button" class="btn btn-danger mt-4" style="min-height: 30pt; min-width: 100px" @onclick="Reset">Reset</button>
                    </td>
                    <td width="5px" />
                    <td>
                        <button type="button" class="btn btn-success mt-4" style="min-height: 30pt; min-width: 100px" @onclick="Save">Save</button>
                    </td>
                    <td width="10px" />
                    <td>
                        <button type="button" class="btn btn-primary mt-4" style="min-height: 30pt; min-width: 40px" @onclick="Next">&gt;</button>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>

@code {
    private const string ConnectionString = @"Data Source=192.168.1.3\SQLSERVER;Initial Catalog=Orthography;Persist Security Info=True;User ID=sa;Password=developer";
    private DataContext dataContext;
    private List<Word> Words;
    private bool[] cbStates = new bool[9];
    private int m_selectedWord;
    private int selectedWordListId = -1;
    private int selectedWordId
    {
        get => m_selectedWord;
        set
        {
            m_selectedWord = value;
            selectedWordListId = Words.IndexOf(Words.FirstOrDefault(p => p.ID == m_selectedWord));
            Reset();
        }
    }
    private string selectedWord => Words.FirstOrDefault(p => p.ID == selectedWordId)?.Value ?? "<not selected>";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        dataContext = new DataContext(ConnectionString);

        Words = dataContext.Words.OrderBy(p => p.Value).ToList();
    }

    private void Previous()
    {
        if (selectedWordListId <= 0) return;
        --selectedWordListId;
        var word = Words[selectedWordListId];
        selectedWordId = word.ID;
    }

    private void Next()
    {
        if (selectedWordListId >= Words.Count - 1) return;
        ++selectedWordListId;
        var word = Words[selectedWordListId];
        selectedWordId = word.ID;
    }

    private void Reset()
    {
        var bits = (selectedWordListId >= 0 && selectedWordListId < Words.Count)
            ? BitmaskToArray((int)Words[selectedWordListId].PrepositionsMask)
            : BitmaskToArray(0);
        for (var i = 0; i < cbStates.Length; ++i)
            cbStates[i] = bits[i];
    }

    private void Save()
    {
        if (selectedWordListId < 0 || selectedWordListId >= Words.Count) return;
        var bitmask = 0;
        for (var i = cbStates.Length - 1; i >= 0; --i)
        {
            bitmask |= cbStates[i] ? 1 : 0;
            if (i > 0) bitmask <<= 1;
        }
        var selected = Words[selectedWordListId];
        var word = dataContext.Words.FirstOrDefault(p => p.ID == selected.ID);
        selected.PrepositionsMask = word.PrepositionsMask = bitmask;
        dataContext.SaveChanges();
    }

    private bool[] BitmaskToArray(int bitmask)
    {
        var res = new bool[9];
        for (var i = 0; i < 9; ++i)
        {
            res[i] = bitmask % 2 > 0;
            bitmask >>= 1;
        }
        return res;
    }
}
