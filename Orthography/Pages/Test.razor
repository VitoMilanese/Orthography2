@page "/test"
@inject IJSRuntime jsRuntime

@foreach (var mode in modes)
{
    <p>
        @UILanguage.Mode(mode.ID, @currentLanguage)
    </p>
}

<button type="button" class="btn btn-success mt-1" style="min-height: 30pt; min-width: 100px" @onclick="Do">Init</button>
<button type="button" class="btn btn-success mt-1" style="min-height: 30pt; min-width: 100px" @onclick="Lang1">Language 1</button>
<button type="button" class="btn btn-success mt-1" style="min-height: 30pt; min-width: 100px" @onclick="Lang2">Language 2</button>
<button type="button" class="btn btn-success mt-1" style="min-height: 30pt; min-width: 100px" @onclick="Save">Save</button>
<button type="button" class="btn btn-success mt-1" style="min-height: 30pt; min-width: 100px" @onclick="Load">Load</button>

@code {
    private List<Mode> modes = new List<Mode>();
    private int currentLanguage = 1;

    private void Do()
    {
        modes.Clear();
        using (var db = new Db())
            modes.AddRange(db.Modes.ToList());
    }

    private void Lang1()
    {
        currentLanguage = 1;
    }

    private void Lang2()
    {
        currentLanguage = 2;
    }

    private void Save()
    {
        SaveLanguage(currentLanguage.ToString(), 365);
    }

    private void Load()
    {
        LoadLanguage();
    }

    private void SaveLanguage(string langId, int days)
    {
        Helper.WriteCookie(jsRuntime, "ui_language", langId, 365);
    }

    private void LoadLanguage()
    {
        Task.Run(async () =>
        {
            const string key = "ui_language";
            var cookie = Helper.ReadCookie(jsRuntime, key);
            var languageId = cookie?.Value;
            currentLanguage = int.TryParse(languageId, out var id)
                            ? id
                            : UILanguage.DefaultLanguage;
            await InvokeAsync(StateHasChanged);
        });
    }
}
